type Mutation {
  confirmEmail(token: String!): Boolean
  sendForgotPasswordEmail(email: String!): Boolean
  forgotPasswordChange(newPassword: String!, token: String!): Boolean
  login(usernameOrEmail: String!, password: String!, token: String): AuthResponse!
  checkTwoFactor(usernameOrEmail: String!, password: String!): Boolean!
  logout: Boolean!
  signup(firstName: String!, lastName: String!, email: String!, password: String!, hasTwoFactor: Boolean = false, username: String!): Boolean
  newPost(name: String!, imageUrl: String!, price: Float!, description: String!): Post!
}

type AuthResponse {
  user: User!
  token: String!
}

type Query {
  me: User
  posts: [Post]!
}

type User {
  id: ID!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  hasTwoFactor: Boolean!
  posts: [Post]!
}

type Post {
  id: ID!
  name: String!
  imageUrl: String!
  price: Float!
  description: String!
  owner: User!
}

schema {
  query: Query
  mutation: Mutation
}
